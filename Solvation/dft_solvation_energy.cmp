# Creator: Miquel Garcia-Rates
# Update : Dimitrios G. Liakos (June of 2024)
# Revised: June of 2025
#
# This protocol computes the solvation energy in a solvent.
#
# For a reference to the methodology please refer to:
#
# Miquel Garcia-Rates Frank Neese, J Comput. Chem. 2020;41:922-939
# Effect of the Solute Cavity on the Solvation Energy and its Derivatives within the 
# Framework of the Gaussian Charge Scheme 
#
# This protocol needs two steps
# In Step 1 The geometry is optimized in vacuum 
#
# In Step 2 The geometry optimized in the previous step is now optimized in the solvent
#
# Then the free energy of solvation will simply be the final energy of the second calculation.
# minus the final energy of the first calculation
#
#****************************************** NOTES ******************************************
# NOTE 1: The energies are given in Hartrees. Here just for convenience we also calculate the energy
#         in kcal/mol
#
# NOTE 2: The details of the calculation (functional, basis set, ... etc) can be adjusted but they 
#         should be the same in both calculations 
#
# NOTE 3: For the case of solvation we use the Gaussian charge scheme with a vdW-type cavity for
#         the solute cavity (surfacetype vdw_gaussian in the %cpcm block)
#
# NOTE 4: We choose "cds_cpcm 2" in the %cpcm block which includes a non-electrostatic solvation
#         component to the energy (this tag is just usable for organic solutes in certain solvents)
#
# NOTE 5: For the second step here we guess charge and multiplicity 0 and 1.
#
# NOTE 6: For the first calculation we use the %base to change the name to vacuumGeometry so that 
#         it is easy to know the name for the second one. This could of course change but it should 
#         be consistent for both calculations
#
# NOTE 6: This scheme will work for DFT calculations because we read the total energy through the
#         it is easy to know the name for the second one. This could of course change but it should
#         be consistent for both calculations
#
# NOTE 7: In this calculation  we use the correction from S. Grimme and for this reason we also add
#         explicitly this correction both on vacuum and solvent.
#
# --------------------  Variables  ------------------------------                
# ----------   Variables that could be adjusted using 'with'-----
variable molecule;
variable charge        = 0;
variable mult          = 1;
Variable method        = "RKS B3LYP RIJCOSX D3BJ";
Variable basis         = "def2-TZVP def2/J";
Variable restOfInput   = "defGrid3 VeryTightSCF VeryTightOpt";
Variable mySolvent     = "water";
# -----------------  Rest of variables --------------------------
Variable E_vac, E_solv;                   # Total energies in vacuum and solvent
Variable ZPE_vac, ZPE_solv;               # Zero point energies
Variable vdw_vac, vdw_solv;               # van der Waals correction
Variable HartToKcal = 627.5096080305927;  # Conversion factor from Hartree to kcal/mol
Variable DE_El_Hartree, DE_El_Kcal;       # Solvation energies in Harrtee and kcal/mol
#
# ----------------------------------------------------------------
# Optimization in vacuum
# ----------------------------------------------------------------
NewStep
  !&{method} &{basis} &{restOfInput} 
  *xyzfile &{charge} &{mult} &{molecule}
  %base "vacuumGeometry" 
StepEnd
E_vac.readProperty(propertyName="SCF_ENERGY");         
vdw_vac.readProperty(propertyName="VDW_CORRECTION");   

# ----------------------------------------------------------------
# Optimization in solvent
# ----------------------------------------------------------------
NewStep
  !&{method} &{basis} CPCM(&{mySolvent})
  * xyzfile &{charge} &{mult} vacuumGeometry.xyz
  %cpcm
    surfacetype vdw_gaussian
  End
StepEnd
E_solv.readProperty(propertyName="SCF_ENERGY");        
vdw_solv.readProperty(propertyName="VDW_CORRECTION");  
#
# ----------------------------------------------------------------
# Now evaluate the difference
# ----------------------------------------------------------------
DE_El_Hartree  = E_solv +vdw_solv - E_vac - vdw_vac;  
DE_El_Kcal     = HartToKcal*DE_El_Hartree ; 
#
# ****************** ADD SOME NICE PRINTING ***********************
print( "  $$$$$$$$$$$$$$$$$$$$$$$$$$$$ COMPOUND JOB RESULTS $$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$ \n");
print(" Molecule                : %s\n", molecule);
print(" Charge                  : %-18d\n", charge);
print(" Mult                    : %-18d\n", mult);
print(" Method                  : %s\n", method);
print(" Basis set               : %s\n", basis);
print(" Rest of input           : %s\n", restOfInput);
print(" Solvent                 : %s\n", mySolvent);
print( "  Free energy in vacuum:\n ");
print( "  ================== \n");
print( "  Electronic Energy in Vacuum [Eh]:         %18.10lf\n", E_vac); 
#
print( "  Free energy in solution:\n");
print( "  ==================\n");
print( "  Electronic Energy in Solution [Eh]:       %18.10lf\n", E_solv); 

print( "  Solvation Energy:\n");
print( "  ==================\n");
print( "  Electronic Energy contribution [kca/mol]: %18.10lf\n", DE_El_Kcal); 
#
print( "  -----------------------------------------------------------------------------------------------------\n");
print( "  $$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$ END $$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$ \n");


EndRun
